# üìå–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ú–∞—Ç—Ä–∏—Ü–∞.
# –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥—ã –¥–ª—è:
# - –≤—ã–≤–æ–¥–∞ –Ω–∞ –ø–µ—á–∞—Ç—å,
# - —Å—Ä–∞–≤–Ω–µ–Ω–∏—è,
# - —Å–ª–æ–∂–µ–Ω–∏—è,
# - *—É–º–Ω–æ–∂–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü

class Matrix:

    def __init__(self, matrix):
        if len(set(len(row) for row in matrix)) != 1:
            raise ValueError("–í—Å–µ —Å—Ç—Ä–æ–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É")
        self.matrix = matrix

    def __str__(self):
        return '\n'.join(['\t'.join(map(str, row)) for row in self.matrix])

    def __eq__(self, other):
        return self.matrix == other.matrix

    def __add__(self, other):
        if len(self.matrix) != len(other.matrix) or len(self.matrix[0]) != len(other.matrix[0]):
            raise ValueError('–†–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å!')
        result_matrix = [[0 for i in range(len(self.matrix[0]))] for j in range(len(self.matrix))]
        for i in range(len(self.matrix)):
            for j in range(len(self.matrix[0])):
                result_matrix[i][j] = self.matrix[i][j] + other.matrix[i][j]
        return Matrix(result_matrix)

    def __mul__(self, other):
        if len(self.matrix[0]) != len(other.matrix):
            raise ValueError('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –ø–µ—Ä–≤–æ–π –º–∞—Ç—Ä–∏—Ü–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç—Ä–æ–∫ –≤ –¥—Ä—É–≥–æ–π!')
        result_matrix = [[0 for i in range(len(self.matrix))] for i in range(len(self.matrix))]
        for i in range(len(self.matrix)):
            for j in range(len(self.matrix)):
                for k in range(len(self.matrix[0])):
                    result_matrix[i][j] += self.matrix[i][k] * other.matrix[k][j]
        return Matrix(result_matrix)


a = Matrix([[2, 4], [3, 1], [5, 6]])
b = Matrix([[4, 4, 2], [3, 1, 6]])
c = Matrix([[3, 1, 2], [0, 5, 2]])
print(a*b)
print(c+b)